# Copyright 2015 Henrik Steffen Ga√ümann
# 
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
# 
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#############################################################################
cmake_minimum_required(VERSION 3.0)
project(utf8cpp)

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
	message(FATAL_ERROR "in-source builds are not supported!")
endif()

if(WIN32)
	add_definitions(-DUNICODE)
	if(MINGW)
		set(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} -municode")
	elseif(MSVC)
		add_definitions(-D_CRT_SECURE_NO_WARNINGS)
	endif()
endif()

#############################################################################
# configure boost
set(Boost_USE_STATIC_LIBS ON)
find_package(Boost 1.58.0 REQUIRED
    system
    unit_test_framework
)
add_definitions(-DBOOST_ALL_NO_LIB)

#############################################################################
# global compiler options
# - highest warning level
# - c++11
if(MSVC)
  # Force to always compile with W4
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  # Update if necessary
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wpedantic")
endif()

#############################################################################
# setup common directories
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

#############################################################################
# utf8cpp interface project
add_library(utf8cpp INTERFACE)

target_include_directories(utf8cpp INTERFACE "${PROJECT_SOURCE_DIR}/source")

#############################################################################
# samples
option(UTFCPP_BUILD_SAMPLES "add the sample projects to the build process")
if (UTFCPP_BUILD_SAMPLES)
    add_executable(doc_sample EXCLUDE_FROM_ALL
        "${PROJECT_SOURCE_DIR}/samples/docsample.cpp"
    )
    target_link_libraries(doc_sample utf8cpp)
endif()

#############################################################################
add_executable(utf8cpp_unit_tests
    "${PROJECT_SOURCE_DIR}/source/utf8.h"
    "${PROJECT_SOURCE_DIR}/source/utf8/core.h"
    "${PROJECT_SOURCE_DIR}/source/utf8/checked.h"
    "${PROJECT_SOURCE_DIR}/source/utf8/unchecked.h"
    
    "${PROJECT_SOURCE_DIR}/unit_tests/utf_init.cpp"
    "${PROJECT_SOURCE_DIR}/unit_tests/fixtures.hpp"
    "${PROJECT_SOURCE_DIR}/unit_tests/negative.cpp"
    "${PROJECT_SOURCE_DIR}/unit_tests/core_tests.cpp"
    "${PROJECT_SOURCE_DIR}/unit_tests/checked_tests.cpp"
    "${PROJECT_SOURCE_DIR}/unit_tests/unchecked_tests.cpp"
)

source_group(unit-tests REGULAR_EXPRESSION ".*/unit_tests/.*")
source_group(utf8cpp REGULAR_EXPRESSION ".*/utf8.*")

target_include_directories(utf8cpp_unit_tests
	PRIVATE ${Boost_INCLUDE_DIR}
)

target_link_libraries(utf8cpp_unit_tests
	${Boost_UNIT_TEST_FRAMEWORK_LIBRARY}
	utf8cpp
)
