// Copyright 2015 Henrik Steffen Gaﬂmann
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
////////////////////////////////////////////////////////////////////////////////
#include <boost/test/unit_test.hpp>

#include <utf8.h>

#include "fixtures.hpp"

BOOST_AUTO_TEST_SUITE( utf8ut_core )

//TODO: add cases for detail functions

BOOST_FIXTURE_TEST_CASE( find_invalid, fixtures::invalid_u8 )
{
    std::string::const_iterator invalid = utf8::find_invalid( enc.cbegin( ), enc.cend( ) );
    BOOST_CHECK( invalid == enc.cbegin( ) + first_invalid_index );
}

BOOST_FIXTURE_TEST_CASE( starts_with_bom, fixtures::valid_u8_with_it )
{
    unsigned char bom[] = { 0xef, 0xbb, 0xbf };
    BOOST_REQUIRE_EQUAL_COLLECTIONS( utf8::bom, utf8::bom + sizeof( utf8::bom ), bom, bom + sizeof( bom ) );

    BOOST_CHECK( utf8::starts_with_bom( bom, bom + sizeof( bom ) ) );
    BOOST_CHECK( !utf8::starts_with_bom( enc_u8_beg, enc_u8_end ) );
}

BOOST_AUTO_TEST_SUITE_END( )
